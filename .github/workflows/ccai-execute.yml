name: CCAI Execute - Reusable Workflow

# 可复用工作流: 被 ccai-trigger.yml 调用
on:
  workflow_call:
    inputs:
      issue_number:
        description: 'Issue number'
        required: true
        type: string
      prompt:
        description: 'User prompt for Claude Code'
        required: true
        type: string
      comment_id:
        description: 'Initial comment ID for updates'
        required: true
        type: string
    secrets:
      ANTHROPIC_API_KEY:
        description: 'Anthropic API Key for Claude Code'
        required: true
      ANTHROPIC_BASE_URL:
        description: 'Anthropic API Base URL (optional, for third-party proxies)'
        required: false
      PAT_TOKEN:
        description: 'Personal Access Token for Claude Code agent to create PR if needed'
        required: false

jobs:
  execute:
    name: Execute Claude Code
    runs-on: ubuntu-latest
    timeout-minutes: 60

    # 并发控制: 按 issue ID 排队
    concurrency:
      group: ccai-issue-${{ inputs.issue_number }}
      cancel-in-progress: false

    # Service Containers: PostgreSQL + Redis
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: nestjs_ci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # ==========================================
      # 步骤 0: 检测排队状态并通知用户
      # ==========================================
      - name: Check if queued and notify
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = ${{ inputs.comment_id }};
            const prompt = `${{ inputs.prompt }}`;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            // 检查是否有同一 issue 的其他运行中的任务
            const { data: runs } = await github.rest.actions.listWorkflowRuns({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ccai-execute.yml',
              status: 'in_progress'
            });

            // 过滤出同一 issue 的其他运行
            const sameIssueRuns = runs.workflow_runs.filter(run =>
              run.id !== context.runId &&
              run.name.includes('issue_${{ inputs.issue_number }}')
            );

            if (sameIssueRuns.length > 0) {
              // 有其他任务正在执行，更新评论为"排队中"
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: commentId,
                body: '🔄 **您的请求已加入队列**\n\n' +
                      '前面有 ' + sameIssueRuns.length + ' 个任务正在执行，请稍候...\n\n' +
                      '📝 **任务**: ' + prompt + '\n' +
                      '🔗 **查看队列**: [Actions 运行日志](' + runUrl + ')'
              });
            }

      # ==========================================
      # 步骤 1: 检出代码
      # ==========================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ==========================================
      # 步骤 2: 分支管理
      # ==========================================
      - name: Setup branch
        id: setup-branch
        run: |
          bash .github/scripts/ccai/setup-branch.sh "${{ inputs.issue_number }}"

      # ==========================================
      # 步骤 3: 安装 pnpm
      # ==========================================
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8
          run_install: false  # 手动安装依赖以使用缓存

      # ==========================================
      # 步骤 4: 设置 Node.js
      # ==========================================
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # ==========================================
      # 步骤 5: 安装依赖
      # ==========================================
      - name: Install dependencies
        run: |
          echo "📁 Current directory contents:"
          ls -la
          echo "🔍 Checking for pnpm-lock.yaml:"
          if [ -f pnpm-lock.yaml ]; then
            echo "✅ pnpm-lock.yaml found"
            cat pnpm-lock.yaml | head -20
          else
            echo "❌ pnpm-lock.yaml not found"
            echo "📋 Installing without frozen lockfile"
            pnpm install
          fi

      # ==========================================
      # 步骤 6: 创建环境配置文件
      # ==========================================
      - name: Create environment file
        run: |
          bash .github/scripts/ccai/setup-env.sh "${{ secrets.ANTHROPIC_API_KEY }}" "${{ secrets.ANTHROPIC_BASE_URL }}" "${{ secrets.PAT_TOKEN }}"

      # ==========================================
      # 步骤 7: 安装 Claude Code CLI
      # ==========================================
      - name: Install Claude Code CLI
        run: |
          pnpm add -g @anthropic-ai/claude-code
          claude --version

      # ==========================================
      # 步骤 7.5: 初始化数据库（生成 Prisma Client + 重置数据库）
      # ==========================================
      - name: Initialize database
        run: |
          chmod +x scripts/dx
          ./scripts/dx startup -Y --dev
        env:
          NODE_ENV: development        

      # ==========================================
      # 步骤 9: 执行 Claude Code 任务
      # ==========================================
      - name: Run Claude Code
        id: run-claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_BASE_URL: ${{ secrets.ANTHROPIC_BASE_URL }}
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        run: |
          bash .github/scripts/ccai/run-claude.sh "${{ inputs.prompt }}"

      # ==========================================
      # 步骤 10: 读取 Claude 输出并保存到变量（不创建新评论）
      # ==========================================
      - name: Read Claude output
        if: always() && steps.run-claude.outcome != 'skipped'
        id: read-output
        run: |
          if [ -f claude_output.log ]; then
            # 使用 base64 编码避免特殊字符问题
            CLAUDE_OUTPUT=$(cat claude_output.log | base64 -w 0 2>/dev/null || cat claude_output.log | base64)
            echo "claude_output_base64=$CLAUDE_OUTPUT" >> $GITHUB_OUTPUT
            echo "has_output=true" >> $GITHUB_OUTPUT
          else
            echo "has_output=false" >> $GITHUB_OUTPUT
            echo "⚠️ claude_output.log 文件不存在"
          fi

      # ==========================================
      # 步骤 11: 处理 Claude 交互请求
      # ==========================================
      - name: Handle Claude interaction
        if: steps.run-claude.outputs.interaction_detected == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = ${{ inputs.comment_id }};
            const interactionMessage = `${{ steps.run-claude.outputs.interaction_message }}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: '🤖 Claude Code 需要更多信息:\n\n```\n' + interactionMessage + '\n```\n\n请在此评论下回复,然后重新触发工作流。'
            });

      # ==========================================
      # 步骤 12: 检查 Git 变更
      # ==========================================
      - name: Check for changes
        id: check-changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Detected code changes"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "⚠️ No code changes detected"
          fi

      # ==========================================
      # 步骤 13: 提交并推送变更到 issue 分支
      # ==========================================
      - name: Commit and push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          BRANCH_NAME="issue_${{ inputs.issue_number }}"
          ISSUE_NUMBER="${{ inputs.issue_number }}"

          git add .
          git commit -m "chore: Claude Code automated changes for issue #${ISSUE_NUMBER}" \
                     -m "Co-Authored-By: Claude <noreply@anthropic.com>" || true
          git push origin "$BRANCH_NAME"

          echo "✅ Changes committed and pushed to branch: $BRANCH_NAME"

      # ==========================================
      # 步骤 14: 更新评论（只显示 Claude 输出）
      # ==========================================
      - name: Update comment with Claude output
        if: always() && steps.read-output.outputs.has_output == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const commentId = ${{ inputs.comment_id }};
            const claudeOutputBase64 = '${{ steps.read-output.outputs.claude_output_base64 }}';
            const exitCode = '${{ steps.run-claude.outputs.exit_code }}';
            const timestamp = new Date().toLocaleString('zh-CN', { timeZone: 'Asia/Shanghai' });
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;
            
            let body = '';
            
            try {
              const claudeOutput = Buffer.from(claudeOutputBase64, 'base64').toString('utf8');
              const maxLength = 60000; // GitHub 评论限制约 65536 字符
              let truncatedOutput = claudeOutput;
              let wasTruncated = false;
              
              if (claudeOutput.length > maxLength) {
                truncatedOutput = claudeOutput.substring(0, maxLength);
                wasTruncated = true;
              }
              
              const statusIcon = exitCode === '0' ? '✅' : '❌';
              const statusText = exitCode === '0' ? '执行成功' : '执行失败';
              
              body = `## 🤖 Claude Code 执行结果\n\n` +
                    `**状态**: ${statusIcon} ${statusText} (退出码: ${exitCode})\n` +
                    `**时间**: ${timestamp}\n\n` +
                    `\`\`\`\n${truncatedOutput}\n\`\`\`\n`;
              
              if (wasTruncated) {
                body += `\n⚠️ *输出内容过长，已截断。完整日志请查看 [Actions 运行记录](${runUrl})*\n`;
              }
            } catch (error) {
              body = '⚠️ 无法解析 Claude 输出日志\n';
              console.error('解析 Claude 输出失败:', error);
            }

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: body
            });

