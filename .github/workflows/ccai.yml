name: Claude Code AI Assistant

# 触发器: Issue 评论和 PR Review 评论
on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

# 权限配置
permissions:
  contents: write       # 允许推送代码
  pull-requests: write  # 允许创建和更新 PR
  issues: write         # 允许创建和更新评论

jobs:
  ccai-task:
    # 仅在评论以 @ccai 开头时触发
    if: startsWith(github.event.comment.body, '@ccai')

    runs-on: ubuntu-latest
    timeout-minutes: 60  # 工作流最大执行时间

    # 并发控制: 按 issue ID 排队,不取消正在进行的任务
    concurrency:
      group: ccai-issue-${{ github.event.issue.number || github.event.pull_request.number }}
      cancel-in-progress: false

    # Service Containers: PostgreSQL + Redis
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: nestjs_ci_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # ==========================================
      # 步骤 1: 权限验证
      # ==========================================
      - name: Check user permission
        id: check-permission
        uses: actions/github-script@v7
        with:
          script: |
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: context.actor
            });

            const hasPermission = ['admin', 'write'].includes(permission.permission);

            if (!hasPermission) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ 权限不足: 只有拥有 write 或 admin 权限的用户才能触发 Claude Code。'
              });
              core.setFailed('User does not have sufficient permissions');
            }

            return hasPermission;

      # ==========================================
      # 步骤 2: 提取 Issue ID
      # ==========================================
      - name: Extract Issue ID
        id: extract-issue
        uses: actions/github-script@v7
        with:
          script: |
            let issueNumber = null;

            // 场景 1: Issue 评论
            if (context.eventName === 'issue_comment') {
              issueNumber = context.issue.number;
              console.log(`Issue comment detected: #${issueNumber}`);
            }
            // 场景 2: PR 评论
            else if (context.eventName === 'pull_request_review_comment') {
              // 获取 PR 详情
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number
              });

              // 从 PR body 中提取 issue 编号
              const body = pr.body || '';
              const issueMatch = body.match(/(?:Closes|Fixes|Resolves)\s+#(\d+)/i);

              if (issueMatch) {
                issueNumber = parseInt(issueMatch[1], 10);
                console.log(`PR comment detected, extracted issue: #${issueNumber}`);
              } else {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: context.issue.number,
                  body: '❌ 无法从 PR 描述中提取 Issue 编号。请在 PR 描述中添加 "Closes #xxx" 或 "Fixes #xxx"。'
                });
                core.setFailed('Unable to extract issue number from PR');
                return null;
              }
            }

            if (!issueNumber) {
              core.setFailed('Failed to determine issue number');
            }

            core.setOutput('issue_number', issueNumber);
            return issueNumber;

      # ==========================================
      # 步骤 3: 提取用户提示词
      # ==========================================
      - name: Extract prompt
        id: extract-prompt
        uses: actions/github-script@v7
        with:
          script: |
            const commentBody = context.payload.comment.body;
            const prompt = commentBody.replace(/^@ccai\s+/, '').trim();

            if (!prompt) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: '❌ 请提供具体的任务描述。格式: `@ccai <your task description>`'
              });
              core.setFailed('Empty prompt');
              return null;
            }

            core.setOutput('prompt', prompt);
            console.log(`Extracted prompt: ${prompt}`);
            return prompt;

      # ==========================================
      # 步骤 4: 创建初始反馈评论
      # ==========================================
      - name: Post initial comment
        id: initial-comment
        uses: actions/github-script@v7
        with:
          script: |
            const prompt = `${{ steps.extract-prompt.outputs.prompt }}`;
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `🤖 Claude Code 正在处理您的请求...\n\n📋 **任务**: ${prompt}\n\n⏳ 请稍候...`
            });

            core.setOutput('comment_id', comment.id);
            return comment.id;

      # ==========================================
      # 步骤 5: 检出代码
      # ==========================================
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史以支持分支操作
          token: ${{ secrets.GITHUB_TOKEN }}

      # ==========================================
      # 步骤 6: 分支管理
      # ==========================================
      - name: Setup branch
        id: setup-branch
        run: |
          ISSUE_NUMBER="${{ steps.extract-issue.outputs.issue_number }}"
          BRANCH_NAME="issue_${ISSUE_NUMBER}"

          # 配置 Git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # 检查分支是否存在
          if git ls-remote --heads origin "$BRANCH_NAME" | grep -q "$BRANCH_NAME"; then
            echo "Branch $BRANCH_NAME exists, checking out and pulling..."
            git fetch origin "$BRANCH_NAME"
            git checkout "$BRANCH_NAME"
            git pull origin "$BRANCH_NAME"
          else
            echo "Branch $BRANCH_NAME does not exist, creating from main..."
            git checkout -b "$BRANCH_NAME" main
          fi

          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "✅ Branch setup complete: $BRANCH_NAME"

      # ==========================================
      # 步骤 7: 设置 Node.js
      # ==========================================
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      # ==========================================
      # 步骤 8: 安装依赖
      # ==========================================
      - name: Install dependencies
        run: |
          npm ci --prefer-offline --no-audit

      # ==========================================
      # 步骤 9: 创建环境配置文件
      # ==========================================
      - name: Create environment file
        run: |
          cat > .env.development.local << 'EOF'
          # CI Environment Configuration
          NODE_ENV=development
          PORT=3000

          # Database (Service Container)
          DATABASE_URL="postgresql://test_user:test_password@localhost:5432/nestjs_ci_test?schema=public"

          # Redis (Service Container)
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_PASSWORD=
          REDIS_DB=0

          # Logging
          LOG_LEVEL=debug

          # Anthropic API Configuration
          ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_BASE_URL=${{ secrets.ANTHROPIC_BASE_URL }}
          EOF

          echo "✅ Environment file created"
          cat .env.development.local | grep -v "ANTHROPIC_API_KEY"

      # ==========================================
      # 步骤 10: 安装 Claude Code CLI
      # ==========================================
      - name: Install Claude Code CLI
        run: |
          npm install -g @anthropic-ai/claude-code
          claude --version

      # ==========================================
      # 步骤 11: 执行 Claude Code 任务
      # ==========================================
      - name: Run Claude Code
        id: run-claude
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_BASE_URL: ${{ secrets.ANTHROPIC_BASE_URL }}
        run: |
          set +e  # 允许命令失败,以便捕获退出码

          PROMPT="${{ steps.extract-prompt.outputs.prompt }}"

          # 执行 Claude Code (非交互模式)
          claude -p "$PROMPT" 2>&1 | tee claude_output.log
          CLAUDE_EXIT_CODE=$?

          echo "exit_code=$CLAUDE_EXIT_CODE" >> $GITHUB_OUTPUT

          # 检查是否有交互请求
          if grep -q "需要更多信息\|请确认\|human interaction" claude_output.log; then
            echo "interaction_detected=true" >> $GITHUB_OUTPUT
            # 提取交互内容 (前20行)
            INTERACTION_MESSAGE=$(grep -A 5 "需要更多信息\|请确认\|human interaction" claude_output.log | head -20)
            echo "interaction_message<<EOF" >> $GITHUB_OUTPUT
            echo "$INTERACTION_MESSAGE" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "interaction_detected=false" >> $GITHUB_OUTPUT
          fi

          exit $CLAUDE_EXIT_CODE

      # ==========================================
      # 步骤 12: 处理 Claude 交互请求
      # ==========================================
      - name: Handle Claude interaction
        if: steps.run-claude.outputs.interaction_detected == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = ${{ steps.initial-comment.outputs.comment_id }};
            const interactionMessage = `${{ steps.run-claude.outputs.interaction_message }}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `🤖 Claude Code 需要更多信息:\n\n\`\`\`\n${interactionMessage}\n\`\`\`\n\n请在此评论下回复,然后重新触发工作流。`
            });

      # ==========================================
      # 步骤 13: 检查 Git 变更
      # ==========================================
      - name: Check for changes
        id: check-changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
            echo "✅ Detected code changes"
            git status --short
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
            echo "⚠️ No code changes detected"
          fi

      # ==========================================
      # 步骤 14: 推送变更
      # ==========================================
      - name: Push changes
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          BRANCH_NAME="${{ steps.setup-branch.outputs.branch_name }}"
          ISSUE_NUMBER="${{ steps.extract-issue.outputs.issue_number }}"

          git add .
          git commit -m "chore: Claude Code automated changes for issue #${ISSUE_NUMBER}

          Co-Authored-By: Claude <noreply@anthropic.com>" || true
          git push origin "$BRANCH_NAME"

          echo "✅ Changes pushed to branch: $BRANCH_NAME"

      # ==========================================
      # 步骤 15: 创建 Pull Request
      # ==========================================
      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true' && steps.run-claude.outputs.exit_code == '0'
        id: create-pr
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.setup-branch.outputs.branch_name }}';
            const issueNumber = ${{ steps.extract-issue.outputs.issue_number }};
            const prompt = `${{ steps.extract-prompt.outputs.prompt }}`;

            // 检查是否已存在 PR
            const { data: existingPRs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: `${context.repo.owner}:${branchName}`,
              state: 'open'
            });

            let prUrl;

            if (existingPRs.length > 0) {
              prUrl = existingPRs[0].html_url;
              console.log(`PR already exists: ${prUrl}`);
            } else {
              // 创建新 PR
              const { data: pr } = await github.rest.pulls.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Fix: Issue #${issueNumber} - Claude Code automated changes`,
                head: branchName,
                base: 'main',
                body: `Closes #${issueNumber}

            🤖 This PR was automatically generated by Claude Code.

            **Original Request**: ${prompt}

            ---
            Generated with [Claude Code](https://claude.com/claude-code)`
              });

              prUrl = pr.html_url;
              console.log(`Created new PR: ${prUrl}`);
            }

            core.setOutput('pr_url', prUrl);
            return prUrl;

      # ==========================================
      # 步骤 16: 更新成功评论
      # ==========================================
      - name: Update comment on success
        if: success() && steps.create-pr.outputs.pr_url
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = ${{ steps.initial-comment.outputs.comment_id }};
            const prUrl = '${{ steps.create-pr.outputs.pr_url }}';
            const prompt = `${{ steps.extract-prompt.outputs.prompt }}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `✅ **任务完成!**

📋 **原始请求**: ${prompt}

🔗 **Pull Request**: ${prUrl}

请查看 PR 并进行代码审查。`
            });

      # ==========================================
      # 步骤 17: 更新失败评论
      # ==========================================
      - name: Update comment on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = ${{ steps.initial-comment.outputs.comment_id }};
            const prompt = `${{ steps.extract-prompt.outputs.prompt }}`;
            const runUrl = `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `❌ **任务失败**

📋 **原始请求**: ${prompt}

🔍 **查看详细日志**: [GitHub Actions 运行记录](${runUrl})

请检查错误信息并重试。`
            });

      # ==========================================
      # 步骤 18: 更新无变更评论
      # ==========================================
      - name: Update comment on no changes
        if: success() && steps.check-changes.outputs.has_changes == 'false'
        uses: actions/github-script@v7
        with:
          script: |
            const commentId = ${{ steps.initial-comment.outputs.comment_id }};
            const prompt = `${{ steps.extract-prompt.outputs.prompt }}`;

            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: commentId,
              body: `⚠️ **任务完成,但未检测到代码变更**

📋 **原始请求**: ${prompt}

Claude Code 执行完成,但未生成任何代码变更。请检查任务是否需要代码修改。`
            });
